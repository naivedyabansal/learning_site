'''
What are migrations?
Migrations are a way of moving a database from one design, a specific set of tables and columns, to a new one.
Migrations are reversible, too. The fact that they can be done backwards and forwards is what gives them their name.
'''

url() is a function that constructs a special object that Django uses to join URLs to view functions.

'''
Django projects contain multiple Django apps. Each app generally encompasses a specific area of functionality.
python manage.py startapp creates the skeleton of an app including the views, models, and tests files.
INSTALLED_APPS is a list of all apps that Django should consider installed and active for the current project.
These apps will be used to find templates, tests, models, and migrations.
python manage.py startapp courses -> command to create new app.
'''

TIME_ZONE is the setting for what time zone your server is running in.

'''
read about django model fields: https://docs.djangoproject.com/en/1.8/ref/models/fields/
django.db.models has most of the model functionality you'll use to create models and their fields.
DateTimeField holds datetime objects.
CharField holds strings.
TextField holds an unspecified amount of text.
'''

'''
manage.py commands:
https://docs.djangoproject.com/en/1.8/ref/django-admin/
python manage.py makemigrations [app] will make the migrations for a specific app.
python manage.py migrate [app] will run the pending migrations for a specific app.
If you leave off the app name, any pending migrations for any apps will be run.
'''

'''
#Adding instances to pur Course model.

python manage.py shell opens a Python shell with Django's configuration already loaded.
Model.objects -> points to model manager, class that controls access to the model's instances, for querying the model
Model.save() will save an in-memory instance of a model to the database.
Model.create() will save an in-memory instance of a model to the database and return the newly-created object.
eg -> Course.objects.create(title="DBMS", description = "Learn how to interact with databases")
Model.filter(attribute=value) will get a QuerySet of all instances of the Model that match the attribute values.
You can change these values with other comparisons, too, like gte or in. Find out more:
https://docs.djangoproject.com/en/1.8/topics/db/queries/#retrieving-objects
'''

'''
Django's admin
python manage.py createsuperuser will create a new superuser, or a user that's allowed to
log into the admin area with all permissions.
admin.site.register(Model) will register a model with the default admin site,
which allows you to edit instances of that model in the admin.
'''

Templates
'''
App-specific templates are best kept in a structure like app_name/templates/app_name because
Django looks in app directories for a directory named templates and makes those templates automatically available.

{{ and }} are used to mark a variable you want printed out.
{% and %} mark template tags, or special bits of Python that Django's template engine knows how to run.
Unlike Jinja2 templates, you can't just run arbitrary Python in a template.

render() turns a request object, a template, and an optional context dictionary into a generated string.
Dictionary lookup, attribute lookup and list-index lookups are implemented with a dot notation.

Template Inheritance:
and adding static files to project
'''

'''
Adding second model steps

An inline is a smaller form inside of a larger form. The smaller form represents a related record in the database.
StackedInline is an inline where each field takes up the full width of the form. Fields are stacked.
TabularInline is an inline where each field is part of a single row for the form.
https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#inlinemodeladmin-objects
'''


'''
The notation ?P<pk> is a Python extension to the standard regex syntax. It means
assign the results of this group (bounded by parens) to the variable name inside.
In this case, assign the regex result to pk.

The use of the "_set" suffix is to reference foreign key relationships in reverse.
Since Step has a foreign key to Course and is referred to as step.course,
the reverse relationship is automatically created for you by Django.
A Course can refer to all Step objects that point to it using the "_set" notation as course.step_set.
The ".all()" part means all records. It could also have been a filter or a get
'''

'''
# Foreign key relation usage in django
Using the models at the top of this page, for example,
an Entry object e can get its associated Blog object by accessing the blog attribute: e.blog.


Django also creates API accessors for the “other” side of the relationship – the link from the
related model to the model that defines the relationship.
For example, a Blog object b has access to a list of all related Entry objects via the entry_set attribute: b.entry_set.all().
'''

'''
Giving 404 messages -> page not found message

get_object_or_404(Model, [selectors]) - Gets an object of Model by using whatever
selection arguments have been given. For example: get_object_or_404(User, username='kennethlove')
would try to get a User with an username set to "kennethlove". If that User didn't exist, a 404 error would be raised.
'''

'''
blank=True - A field can be blank (not filled in) in the admin and any other forms based on the model.
default='something' - If no value is supplied for the field, the default 'something' will be put into the record.
'''